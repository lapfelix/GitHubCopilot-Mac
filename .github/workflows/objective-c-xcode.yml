name: Xcode - Build, Analyze, and Release

on:
  push:
    branches: [ "main" ]
    tags: ['*']  # Triggers on any tag push (e.g., 1.0.3)
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Analyze Default Scheme Using xcodebuild
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default > default
          echo "Using default scheme: $default"

      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ "$scheme" = default ]; then scheme=$(cat default); fi
          if ls -A | grep -i "\.xcworkspace$" > /dev/null; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i "\.xcworkspace$")
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i "\.xcodeproj$")
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          echo "Building with $filetype_parameter: $file_to_build and scheme: $scheme"
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -derivedDataPath build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Zip .app Output
        run: |
          APP_PATH=$(find build/Build/Products -name "*.app" -print -quit)
          echo "Found app at: $APP_PATH"
          if [ -z "$APP_PATH" ]; then
            echo "Error: .app not found in build/Build/Products directory"
            exit 1
          fi
          zip -r "GitHub_Copilot.zip" "$APP_PATH"
          ls -la GitHub_Copilot.zip

  release:
    name: Notarize, Create Release, and Upload Asset on Tag
    runs-on: macos-latest
    needs: build
    # if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug - List Files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing current directory contents:"
          ls -la
          echo "Listing subdirectories (using BSD-compatible find):"
          find . -maxdepth 2 | sort

      - name: Check for GitHub_Copilot.zip file
        run: |
          if [ -f "GitHub_Copilot.zip" ]; then
            echo "GitHub_Copilot.zip found:"
            ls -la GitHub_Copilot.zip
          else
            echo "Error: GitHub_Copilot.zip not found. Debugging directory structure:"
            find . -name "*.zip" -print
            exit 1
          fi

      - name: Run Notary Tools
        uses: GuillaumeFalourd/notary-tools@v1
        with:
          product_path: "GitHub_Copilot.zip"   # using the zipped app
          apple_id: ${{ secrets.APPLE_ID }}
          password: ${{ secrets.PASSWORD }}
          team_id: ${{ secrets.TEAM_ID }}
          xcode_path: "$(xcode-select -p)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload Notarized Binary as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "GitHub_Copilot.zip"
          asset_name: "GitHub_Copilot.zip"
          asset_content_type: application/zip

name: Xcode - Build, Analyze, and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build and Analyze Default Scheme Using xcodebuild
    runs-on: macos-15
    outputs:
      artifact-name: GitHub_Copilot.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "$default" > default
          echo "Using default scheme: $default"

      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ "$scheme" = default ]; then scheme=$(cat default); fi
          if ls -A | grep -i "\.xcworkspace$" > /dev/null; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i "\.xcworkspace$")
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i "\.xcodeproj$")
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          echo "Building with $filetype_parameter: $file_to_build and scheme: $scheme"
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -derivedDataPath build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Zip .app Output
        run: |
          APP_PATH=$(find build/Build/Products -name "*.app" -print -quit)
          echo "Found app at: $APP_PATH"
          if [ -z "$APP_PATH" ]; then
            echo "Error: .app not found in build/Build/Products directory"
            exit 1
          fi
          zip -r "GitHub_Copilot.zip" "$APP_PATH"
          ls -la GitHub_Copilot.zip

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GitHub_Copilot.zip
          path: GitHub_Copilot.zip

  release:
    name: Notarize, Staple, Create Release, and Upload Asset on Commit
    runs-on: macos-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: GitHub_Copilot.zip
          path: .

      - name: Debug - List Files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing contents:"
          find . | sort

      - name: Check for GitHub_Copilot.zip file
        run: |
          if [ -f "GitHub_Copilot.zip" ]; then
            echo "GitHub_Copilot.zip found:"
            ls -la GitHub_Copilot.zip
          else
            echo "Error: GitHub_Copilot.zip not found. Debugging directory structure:"
            find . -name "*.zip" -print
            exit 1
          fi

      - name: Extract Build Artifact
        run: |
          unzip -o GitHub_Copilot.zip
          echo "Extraction complete. Directory contents:"
          find . | sort

      - name: Locate .app File
        id: find_app
        run: |
          APP_PATH=$(find . -type d -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: No .app file found after extraction."
            exit 1
          fi
          echo "Found .app file at: $APP_PATH"
          echo "::set-output name=app_path::$APP_PATH"

      - name: Rename .app File (remove spaces)
        id: rename_app
        run: |
          APP_PATH="${{ steps.find_app.outputs.app_path }}"
          APP_BASENAME=$(basename "$APP_PATH")
          NEW_APP_BASENAME=$(echo "$APP_BASENAME" | tr ' ' '_')
          NEW_APP_PATH=$(dirname "$APP_PATH")/"$NEW_APP_BASENAME"
          echo "Renaming '$APP_PATH' to '$NEW_APP_PATH'"
          mv "$APP_PATH" "$NEW_APP_PATH"
          echo "::set-output name=new_app_path::$NEW_APP_PATH"

      - name: Create notarization zip archive
        id: zip_app_for_notarization
        run: |
          APP_PATH="${{ steps.rename_app.outputs.new_app_path }}"
          NOTARIZATION_ZIP="GitHub_Copilot_forNotarization.zip"
          rm -f "$NOTARIZATION_ZIP"
          zip -r "$NOTARIZATION_ZIP" "$APP_PATH"
          echo "Created zip for notarization: $NOTARIZATION_ZIP"
          echo "::set-output name=notarization_zip::$NOTARIZATION_ZIP"

      - name: Submit for Notarization
        run: |
          NOTARIZATION_ZIP=${{ steps.zip_app_for_notarization.outputs.notarization_zip }}
          KEYCHAIN_PATH=$RUNNER_TEMP/notarization.keychain-db
          # Create a temporary keychain and store credentials
          KEYCHAIN_PASS=$(uuidgen)
          security create-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
          security set-keychain-settings -lut 900 ${KEYCHAIN_PATH}
          security unlock-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
          xcrun notarytool store-credentials "notarization" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.PASSWORD }}" --team-id "${{ secrets.TEAM_ID }}" --keychain "${KEYCHAIN_PATH}"
          echo "Submitting $NOTARIZATION_ZIP for notarization..."
          xcrun notarytool submit "$NOTARIZATION_ZIP" --keychain-profile "notarization" --keychain "${KEYCHAIN_PATH}" --wait
          # Clean up temporary keychain
          security delete-keychain ${KEYCHAIN_PATH}

      - name: Staple the notarization ticket to the .app
        run: |
          APP_PATH=${{ steps.rename_app.outputs.new_app_path }}
          echo "Stapling notarization ticket to $APP_PATH..."
          xcrun stapler staple "$APP_PATH"

      - name: Rezip Notar â–‹

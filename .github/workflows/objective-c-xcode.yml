name: Xcode - Archive, Notarize, and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build and Archive with xcodebuild
    runs-on: macos-15
    outputs:
      artifact-name: GitHub_Copilot.zip

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Xcode Version
        run: sudo xcode-select -s $(xcode-select -p)

      - name: Archive App
        run: |
          # Define variables
          SCHEME="GitHub Copilot"
          PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
          ARCHIVE_PATH="build/GitHub_Copilot.xcarchive"
          EXPORT_OPTIONS_PLIST="exportOptions.plist"
          
          # Create an exportOptions.plist file
          cat <<EOF > ${EXPORT_OPTIONS_PLIST}
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>developer-id</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          
          echo "Archiving the app..."
          xcodebuild archive \
            -project "$PROJECT_FILE" \
            -scheme "$SCHEME" \
            -archivePath "$ARCHIVE_PATH" \
            -configuration Release \
            clean archive

          echo "Exporting the archive..."
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath build/exported \
            -exportOptionsPlist "$EXPORT_OPTIONS_PLIST"

          # Zip the exported .app for later notarization
          APP_PATH=$(find build/exported -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
              echo "Error: .app not found in exported archive."
              exit 1
          fi
          echo "Found .app at: $APP_PATH"
          zip -r "GitHub_Copilot.zip" "$APP_PATH"
          ls -la GitHub_Copilot.zip

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GitHub_Copilot.zip
          path: GitHub_Copilot.zip

  release:
    name: Notarize, Staple, and Release
    runs-on: macos-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: GitHub_Copilot.zip
          path: .

      - name: Debug - List Files
        run: |
          echo "Current working directory: $(pwd)"
          find . | sort

      - name: Unzip Build Artifact
        run: |
          unzip -o GitHub_Copilot.zip
          echo "Extraction complete."
          find . | sort

      - name: Locate .app File
        run: |
          APP_PATH=$(find . -type d -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: .app file not found."
            exit 1
          fi
          echo "Found .app file at: $APP_PATH"
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV

      - name: Ensure .app Name Has No Spaces
        run: |
          APP_PATH=${{ env.APP_PATH }}
          APP_BASENAME=$(basename "$APP_PATH")
          NEW_APP_BASENAME=$(echo "$APP_BASENAME" | tr ' ' '_')
          NEW_APP_PATH=$(dirname "$APP_PATH")/"$NEW_APP_BASENAME"
          echo "Renaming '$APP_PATH' to '$NEW_APP_PATH'"
          mv "$APP_PATH" "$NEW_APP_PATH"
          echo "NEW_APP_PATH=$NEW_APP_PATH" >> $GITHUB_ENV

      - name: Create Notarization Zip Archive
        run: |
          APP_PATH=${{ env.NEW_APP_PATH }}
          NOTARIZATION_ZIP="GitHub_Copilot_forNotarization.zip"
          rm -f "$NOTARIZATION_ZIP"
          zip -r "$NOTARIZATION_ZIP" "$APP_PATH"
          echo "Created zip for notarization: $NOTARIZATION_ZIP"
          echo "NOTARIZATION_ZIP=$NOTARIZATION_ZIP" >> $GITHUB_ENV

      - name: Submit for Notarization
        run: |
          NOTARIZATION_ZIP=${{ env.NOTARIZATION_ZIP }}
          KEYCHAIN_PATH=$RUNNER_TEMP/notarization.keychain-db
          KEYCHAIN_PASS=$(uuidgen)
          security create-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
          security set-keychain-settings -lut 900 ${KEYCHAIN_PATH}
          security unlock-keychain -p "${KEYCHAIN_PASS}" ${KEYCHAIN_PATH}
          xcrun notarytool store-credentials "notarization" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.PASSWORD }}" --team-id "${{ secrets.TEAM_ID }}" --keychain "${KEYCHAIN_PATH}"
          echo "Submitting $NOTARIZATION_ZIP for notarization..."
          xcrun notarytool submit "$NOTARIZATION_ZIP" --keychain-profile "notarization" --keychain "${KEYCHAIN_PATH}" --wait
          security delete-keychain ${KEYCHAIN_PATH}

      - name: Staple Notarization Ticket to .app
        run: |
          APP_PATH=${{ env.NEW_APP_PATH }}
          echo "Stapling notarization ticket to $APP_PATH..."
          xcrun stapler staple "$APP_PATH"

      - name: Rezip Notarized App for Release
        run: |
          APP_PATH=${{ env.NEW_APP_PATH }}
          rm -f GitHub_Copilot_Notarized.zip
          zip -r "GitHub_Copilot_Notarized.zip" "$APP_PATH"
          ls -la GitHub_Copilot_Notarized.zip

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: "Release ${GITHUB_SHA::7}"
          draft: false
          prerelease: false

      - name: Upload Notarized Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "GitHub_Copilot_Notarized.zip"
          asset_name: "GitHub_Copilot_Notarized.zip"
          asset_content_type: application/zip
